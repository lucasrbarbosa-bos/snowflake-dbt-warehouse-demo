name: ci-deploy-dbt-project

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      # Default connection envs consumed by config.toml
      SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT:  ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_USER:     ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_ROLE:     SYSADMIN

      # Your Snowflake Git repository object (fully-qualified recommended)
      # Example: DBT_PROJECTS.DEV.SNOWFLAKE_DBT_REPO
      REPO_NAME: "DBT_PROJECTS.GITHUB.SNOWFLAKE_DBT_REPO"

      # dbt ENV (unchanged from before)
      DBT_PROFILES_DIR: ${{ github.workspace }}/.github/utils

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dbt (local compile only)
        run: |
          python -m pip install --upgrade pip
          pip install "dbt-snowflake==1.10.*"
          dbt --version

      # Install Snowflake CLI and point it to config.toml
      - uses: snowflakedb/snowflake-cli-action@v1.5
        with:
          cli-version: "3.6.0"
          default-config-file-path: "config.toml"

      # Write the private key to disk and export path/passphrase for the CLI
      - name: Prepare Snowflake private key (for JWT)
        shell: bash
        run: |
          # Persist PEM to a temp path with strict perms
          umask 177
          KEY_PATH="$RUNNER_TEMP/sf_key.p8"
          printf '%s' "${{ secrets.SNOWFLAKE_PRIVATE_KEY_PEM }}" > "$KEY_PATH"

          # Export the variables read by config.toml
          echo "SNOWFLAKE_CONNECTIONS_DEFAULT_PRIVATE_KEY_PATH=$KEY_PATH" >> "$GITHUB_ENV"
          echo "SNOWFLAKE_CONNECTIONS_DEFAULT_PRIVATE_KEY_PASSPHRASE=${{ secrets.PRIVATE_KEY_PASSPHRASE }}" >> "$GITHUB_ENV"

      - name: Test Snowflake connection (default via JWT)
        run: snow connection test --connection default

      # Optional dbt steps (kept as-is)
      - name: Prepare CI profile
        run: cp .github/utils/cicd_profiles.yml .github/utils/profiles.yml

      - name: dbt deps
        run: dbt deps

      - name: dbt compile (PR -> DEV)
        if: github.event_name == 'pull_request'
        run: dbt compile --target dev

      # Always refresh the repo clone in Snowflake before executing
      - name: Fetch Snowflake Git repository clone
        run: snow git fetch "${REPO_NAME}"

      - name: Verify repo path (LIST)
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="main"
          fi
          snow git fetch "${REPO_NAME}"

          snow sql -q "ALTER GIT REPOSITORY ${REPO_NAME} FETCH REFS=('refs/heads/${BRANCH_NAME}')"

          # This must show your SQL files; if empty, the path or branch is wrong.
          snow sql -q "LIST @${REPO_NAME}/branches/${BRANCH_NAME}/deploy/"

      # Execute deploy_parametrized from the PR branch or main
      - name: Deploy (branch-aware from repo)
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"   # deploy the PR branch
            ENVIRONMENT="DEV"
            WH="ANALYST_WH_DEV"
            SRC_SCHEMA="DEV"
          else
            BRANCH_NAME="main"                     # push to main -> PROD
            ENVIRONMENT="PROD"
            WH="ANALYST_WH_PROD"
            SRC_SCHEMA="PROD"
          fi

          echo "Deploying @${REPO_NAME}/branches/${BRANCH_NAME} to ${ENVIRONMENT}"

          snow git execute @${REPO_NAME}/branches/${BRANCH_NAME}/deploy/deploy_parametrized.sql \
            -D repo_name=${REPO_NAME} \
            -D branch=${BRANCH_NAME} \
            -D env=${ENVIRONMENT} \
            -D db_name=DBT_PROJECTS \
            -D dbt_project_object='SNOWFLAKE_DBT_WAREHOUSE_DEMO \
            -D wh=${WH} \
            -D src_db=DBT_PROJECTS \
            -D src_schema=${SRC_SCHEMA} \
            -D daily_cron="USING CRON 30 2 * * * America/Sao_Paulo" \
            -D extra_args=''"  # e.g. " --select state:modified+ --state @state/manifest

      # Keep your dbt project deploys (now with JWT); adjust names as needed
      - name: Deploy DBT PROJECT (DEV)
        if: github.event_name == 'pull_request'
        run: |
          snow dbt deploy dbt_projects.dev.jaffle_shop_test \
            --source . \
            --profiles-dir . \
            --database dbt_projects \
            --schema dev \
            --role SYSADMIN \
            --warehouse ANALYST_WH_DEV \
            --account "${SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT}" \
            --user "${SNOWFLAKE_CONNECTIONS_DEFAULT_USER}" \
            --authenticator SNOWFLAKE_JWT \
            --private-key-path "${SNOWFLAKE_CONNECTIONS_DEFAULT_PRIVATE_KEY_PATH}" \
            ${SNOWFLAKE_CONNECTIONS_DEFAULT_PRIVATE_KEY_PASSPHRASE:+--private-key-passphrase "${SNOWFLAKE_CONNECTIONS_DEFAULT_PRIVATE_KEY_PASSPHRASE}"} \
            -x

      - name: Deploy DBT PROJECT (PROD)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          snow dbt deploy dbt_projects.prod.jaffle_shop_test \
            --source . \
            --profiles-dir . \
            --database dbt_projects \
            --schema prod \
            --role SYSADMIN \
            --warehouse ANALYST_WH_PROD \
            --account "${SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT}" \
            --user "${SNOWFLAKE_CONNECTIONS_DEFAULT_USER}" \
            --authenticator SNOWFLAKE_JWT \
            --private-key-path "${SNOWFLAKE_CONNECTIONS_DEFAULT_PRIVATE_KEY_PATH}" \
            ${SNOWFLAKE_CONNECTIONS_DEFAULT_PRIVATE_KEY_PASSPHRASE:+--private-key-passphrase "${SNOWFLAKE_CONNECTIONS_DEFAULT_PRIVATE_KEY_PASSPHRASE}"} \
            -x

      - name: Cleanup key
        if: always()
        run: rm -f "${SNOWFLAKE_CONNECTIONS_DEFAULT_PRIVATE_KEY_PATH}"
